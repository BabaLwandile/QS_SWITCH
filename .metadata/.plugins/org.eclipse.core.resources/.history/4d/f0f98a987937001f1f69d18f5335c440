/*
 * fault_handling.c
 *
 *  Created on: Jun 24, 2024
 *      Author: 0163022
 */

#include "fault_handling.h"
#include "motor_control.h"
#include "main.h"
#include "QS_Switch.h"

#define STALL_CURRENT 3.0 // 3A
#define TIMEOUT 5000 // 5 seconds
#define COOLDOWN_DURATION_MS 120000 //2 minutes cool down time
uint32_t adcValue;
float current;


void ControlMotor(int);

FaultState FAULT(void)
    {
    adcValue = read_current();
    current = (adcValue / 4095.0) * 3.3; // Convert ADC value to current

    uint32_t startTime = HAL_GetTick();
    ///>< Checking the feedback from the micro switches on the QS switch
    if ((GPIO_ACFB_Pin == GPIO_PIN_RESET) && (GPIO_DCFB_Pin == GPIO_PIN_RESET))
	{
	return STATE_INBETWEEN;
	}
    ///>< Checking for stalling current
    else if (current >= STALL_CURRENT)
	{
	return STATE_STALL;
	}
    ///><Cheking for time out
    else if ((HAL_GetTick() - startTime) > TIMEOUT)
	{
	return STATE_TIMEOUT;
	}
    ///><Checking for mismatch
    else if ((GPIO_DCS_Pin == GPIO_PIN_SET && GPIO_ACFB_Pin == GPIO_PIN_SET)
	    || (GPIO_ACS_Pin == GPIO_PIN_SET && GPIO_DCFB_Pin == GPIO_PIN_SET))
	{
	return STATE_MISMATCH;

	}
    ///>< If it receive the signal/comand but the enable signal is not active, should return the fault
    else if ((GPIO_DCS_Pin == GPIO_PIN_SET
	    && GPIO_Enable_Signal_Pin == GPIO_PIN_RESET)
	    || (GPIO_ACS_Pin == GPIO_PIN_SET
		    && GPIO_Enable_Signal_Pin == GPIO_PIN_RESET))
	{
	return STATE_ES_NOT_ACTIVE;
	}
    return 0;
    }

void HandleFault(uint8_t faultType)
    {
    faultType = FAULT();
    uint32_t Time = HAL_GetTick();
    switch (faultType)
	{
    case STATE_INBETWEEN:
	HAL_GPIO_WritePin(GPIOB, GPIO_LED_FAULT_Pin, GPIO_PIN_SET); ///>< Light the RED LED to indicate the fault
	///>< Move to safe mode

	break;
    case STATE_TIMEOUT:
	break;
    case STATE_STALL:
	break;
    case STATE_MISMATCH:
	break;
    case STATE_ES_NOT_ACTIVE:
	HAL_GPIO_WritePin(GPIOA, GPIO_LED_FAULT_Pin, GPIO_PIN_SET);
	// Stop the motor
	HAL_GPIO_WritePin(GPIOB, GPIO_Forward_Pin | GPIO_Reverse_Pin,
		GPIO_PIN_RESET);
	while ((HAL_GetTick() - Time) < COOLDOWN_DURATION_MS)
	    {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_LED_EN_Pin);
	    HAL_Delay(500);
	    }
	break;
	}
    // After fault, switch to safe mode (AC Mode). 1 -> Clockwise
    ControlMotor(1);

    }

